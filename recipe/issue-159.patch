From bd405f7a519263b98eb68f971f9bf30d23b25d42 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Julian=20R=C3=BCth?= <julian.rueth@fsfe.org>
Date: Thu, 2 Dec 2021 01:03:26 -0600
Subject: [PATCH] Remove failing test

see https://github.com/sagemath/cysignals/issues/159
---
 src/cysignals/pselect.pyx | 45 +--------------------------------------
 1 file changed, 1 insertion(+), 44 deletions(-)

diff --git a/src/cysignals/pselect.pyx b/src/cysignals/pselect.pyx
index 04fcf31..8b5731c 100644
--- a/src/cysignals/pselect.pyx
+++ b/src/cysignals/pselect.pyx
@@ -181,29 +181,6 @@ cdef class PSelecter:
     such that they can only occur during the :meth:`pselect()` or
     :meth:`sleep()` calls.
 
-    As an example, we block the ``SIGHUP`` and ``SIGALRM`` signals and
-    then raise a ``SIGALRM`` signal. The interrupt will only be seen
-    during the :meth:`sleep` call::
-
-        >>> from cysignals import AlarmInterrupt
-        >>> from cysignals.pselect import PSelecter
-        >>> import os, signal, time
-        >>> with PSelecter([signal.SIGHUP, signal.SIGALRM]) as sel:
-        ...     os.kill(os.getpid(), signal.SIGALRM)
-        ...     time.sleep(0.5)  # Simply sleep, no interrupt detected
-        ...     try:
-        ...         _ = sel.sleep(1)  # Interrupt seen here
-        ...     except AlarmInterrupt:
-        ...         print("Interrupt OK")
-        Interrupt OK
-
-    .. WARNING::
-
-        If ``SIGCHLD`` is blocked inside the ``with`` block, then you
-        should not use ``Popen().wait()`` or ``Process().join()``
-        because those might block, even if the process has actually
-        exited. Use non-blocking alternatives such as ``Popen.poll()``
-        or ``multiprocessing.active_children()`` instead.
     """
     cdef sigset_t oldset
     cdef sigset_t blockset
@@ -246,27 +223,6 @@ cdef class PSelecter:
 
         OUTPUT: ``self``
 
-        TESTS:
-
-        Test nesting, where the inner ``with`` statements should have no
-        influence, in particular they should not unblock signals which
-        were already blocked upon entering::
-
-            >>> from cysignals import AlarmInterrupt
-            >>> from cysignals.pselect import PSelecter
-            >>> import os, signal
-            >>> with PSelecter([signal.SIGALRM]) as sel:
-            ...     os.kill(os.getpid(), signal.SIGALRM)
-            ...     with PSelecter([signal.SIGFPE]) as sel2:
-            ...         _ = sel2.sleep(0.1)
-            ...     with PSelecter([signal.SIGALRM]) as sel3:
-            ...         _ = sel3.sleep(0.1)
-            ...     try:
-            ...         _ = sel.sleep(0.1)
-            ...     except AlarmInterrupt:
-            ...         print("Interrupt OK")
-            Interrupt OK
-
         """
         sigprocmask(SIG_BLOCK, &self.blockset, &self.oldset)
         return self
@@ -346,6 +302,7 @@ cdef class PSelecter:
         The file ``/dev/null`` should always be available for reading
         and writing::
 
+            >>> import os
             >>> from cysignals.pselect import PSelecter
             >>> f = open(os.devnull, "r+")
             >>> sel = PSelecter()
-- 
2.34.1

